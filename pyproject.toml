[project]
name = "mock-project"
version = "0.1.0"
description = "A template for a python project."
authors = [
    {name = "Christopher Sutton",email = "csuttonmajor@gmail.com"}
]
license = {text = "MIT"}
readme = "README.md"
requires-python = ">=3.13"

[tool.poetry]
name = "mock_project"
version = "0.1.0"
description = "A mock Python project template"
authors = ["Your Name <your.email@example.com>"]
license = "MIT"
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.13"

[tool.poetry.dev-dependencies]
pytest = "^8.3.5"
ruff = "^0.9.9"
python-semantic-release = "^9.21.0"

[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.semantic_release]
branch = "main"              # Releases from main branch
version_source = "tag"       # Version derived from tags
tag_format = "v{version}"    # Tags like v0.1.0
upload_to_pypi = false       # No PyPI upload for template
changelog_file = "CHANGELOG.md"  # Explicitly set changelog file

[tool.semantic_release.remote]
type = "github"
token = { env = "GH_TOKEN" }

[tool.semantic_release.changelog]
template_dir = "templates"   # Optional: Custom templates (weâ€™ll add this)
exclude_commit_patterns = [
    "^Merge branch",
    "^Bump version"
]  # Skip merge and version bump commits in changelog

[tool.semantic_release.commit_parser_options]
minor_tags = ["feat"]        # Features trigger minor bumps
patch_tags = ["fix", "perf"] # Fixes and perf trigger patch bumps